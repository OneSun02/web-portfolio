from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from fastapi.responses import FileResponse
from pydantic import BaseModel
import requests
import os
from dotenv import load_dotenv

# -------------------------
# Kh·ªüi t·∫°o FastAPI
# -------------------------
app = FastAPI(title="FastAPI + Gemini Chat")

# -------------------------
# CORS (cho frontend g·ªçi backend)
# -------------------------
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# -------------------------
# Load .env
# -------------------------
load_dotenv()
API_KEY = os.getenv("GEMINI_API_KEY")
MODEL = "models/gemini-2.5-flash"
BASE_URL = "https://generativelanguage.googleapis.com/v1beta"

# -------------------------
# Serve frontend
# -------------------------
# frontend folder (relative)
frontend_path = os.path.join(os.path.dirname(__file__), "../frontend")

# Mount folder static (CSS, JS, videos, images)
app.mount("/static", StaticFiles(directory=frontend_path), name="static")

# Khi m·ªü '/' tr·∫£ v·ªÅ index.html
@app.get("/")
def serve_index():
    return FileResponse(os.path.join(frontend_path, "index.html"))

# -------------------------
# Request body cho chat
# -------------------------
class ChatRequest(BaseModel):
    message: str

# -------------------------
# Endpoint chat
# -------------------------
@app.post("/chat")
def chat(req: ChatRequest):
    url = f"{BASE_URL}/{MODEL}:generateContent?key={API_KEY}"

    # Context AI (lu√¥n g·ª≠i k√®m)
    system_prompt = """
    B·∫°n l√† T√¥i, Ph·∫°m Xu√¢n Nh·∫•t v√† tr·∫£ l·ªùi t·∫•t c·∫£ c√¢u h·ªèi v·ªÅ b·∫£n th√¢n nh∆∞ ch√≠nh b·∫°n, ki·ªÉu ph·ªèng v·∫•n. 
    Lu√¥n t·ª± tin, th√¢n thi·ªán, chuy√™n nghi·ªáp, trung th·ª±c, kh√¥ng lan man.
    Th√¥ng tin:
    - H·ªç t√™n: Ph·∫°m Xu√¢n Nh·∫•t
    - Email: nhat280602@gmail.com | SƒêT: 0362999004
    - ƒê·ªãa ch·ªâ: Ho Chi Minh City, Vietnam
    - Portfolio: web-portfolio-299v.onrender.com
    - GitHub: github.com/OneSun02 | LinkedIn: linkedin.com/in/pham-nhat-pham-673747284/
    Gi·ªõi thi·ªáu: "Xin ch√†o, t√¥i l√† Nhat - Web Developer. G·∫ßn 1 nƒÉm kinh nghi·ªám frontend & backend, tri·ªÉn khai NBTrade, Book Store Web App, portfolio c√° nh√¢n. Lu√¥n vi·∫øt code s·∫°ch, t·ªëi ∆∞u UX/UI, h·ªçc h·ªèi c√¥ng ngh·ªá m·ªõi."
    H·ªçc v·∫•n: C·ª≠ nh√¢n Data Science, VNU-HCM UIT (2020‚Äì2024)
    Kinh nghi·ªám:
    1. Frontend Intern ‚Äì Power5 Tech (06/2024‚Äì12/2024): Thi·∫øt k·∫ø & t·ªëi ∆∞u UI LMS, responsive, h·ª£p t√°c designer.
    2. IT Support ‚Äì NB Trade (01/2025‚Äì08/2025): WordPress SEO & responsive, h·ªó tr·ª£ k·ªπ thu·∫≠t, workflow AI, SharePoint qu·∫£n l√Ω ƒë∆°n h√†ng, t·ª± ƒë·ªông ƒë·ªìng b·ªô d·ªØ li·ªáu.
    D·ª± √°n:
    - NBTrade (WordPress): nbtrade.com.vn, theme/plugin, SEO, responsive, caching, GA & Yoast SEO.
    - Book Store Web App (Next.js, TS, Node.js, PostgreSQL): github.com/OneSun02/book-store, auth JWT, product listing, gi·ªè h√†ng, CI/CD Vercel.
    - Personal Portfolio (HTML/CSS/JS, FastAPI, Gemini API): github.com/OneSun02/web-portfolio, backend API, frontend responsive, chatbot, lazy loading, minify CSS/JS.
    K·ªπ nƒÉng:
    - Frontend: HTML, CSS, JS, React, Next.js
    - Backend/API: Node.js, FastAPI, Flask, Django, REST API
    - DB: PostgreSQL, MySQL | CMS/SEO: WordPress, meta tags, schema
    - Data Science/ML: Pandas, NumPy, Matplotlib, Scikit-learn, Keras
    - Tools: Git, GitHub, Jupyter Notebook | AI h·ªó tr·ª£ code & workflow
    Soft skills: Gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ, giao ti·∫øp, qu·∫£n l√Ω th·ªùi gian, h·ªçc h·ªèi nhanh, ch√∫ √Ω chi ti·∫øt, code s·∫°ch, test k·ªπ
    H∆∞·ªõng d·∫´n tr·∫£ l·ªùi: Khi h·ªèi kinh nghi·ªám, n√™u d·ª± √°n. Khi h·ªèi k·ªπ nƒÉng, gi·∫£i th√≠ch ·ª©ng d·ª•ng. N·∫øu kh√¥ng bi·∫øt, tr·∫£ l·ªùi trung th·ª±c, gi·ªØ t√≠ch c·ª±c. Lu√¥n t·ª± tin, th√¢n thi·ªán, chuy√™n nghi·ªáp, tr·∫£ l·ªùi ƒë√∫ng tr·ªçng t√¢m, ƒë√∫ng ng√¥n ng·ªØ c·ªßa ng∆∞·ªùi h·ªèi.
    """
    payload = {
        "contents": [
            {"role": "user", "parts": [{"text": system_prompt}]},  # context
            {"role": "user", "parts": [{"text": req.message}]}
        ]
    }

    try:
        res = requests.post(url, headers={"Content-Type": "application/json"}, json=payload)
        data = res.json()

        # Debug: in raw response
        print("üîç Raw API response:", data)

        # L·∫•y reply
        candidates = data.get("candidates", [])
        if candidates and "content" in candidates[0]:
            parts = candidates[0]["content"].get("parts", [])
            reply = parts[0].get("text", "‚ùå Kh√¥ng c√≥ ph·∫£n h·ªìi") if parts else "‚ùå Kh√¥ng c√≥ ph·∫£n h·ªìi (parts r·ªóng)"
        else:
            reply = "‚ùå Kh√¥ng c√≥ ph·∫£n h·ªìi (kh√¥ng c√≥ candidates)"

        return {"reply": reply}

    except Exception as e:
        return {"reply": f"‚ùå L·ªói backend: {str(e)}"}

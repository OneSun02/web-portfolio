from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from fastapi.responses import FileResponse
from pydantic import BaseModel
import requests
import os
from dotenv import load_dotenv

# -------------------------
# Kh·ªüi t·∫°o FastAPI
# -------------------------
app = FastAPI(title="FastAPI + Gemini Chat")

# -------------------------
# CORS (cho frontend g·ªçi backend)
# -------------------------
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# -------------------------
# Load .env
# -------------------------
load_dotenv()
API_KEY = os.getenv("GEMINI_API_KEY")
MODEL = "models/gemini-2.5-flash"
BASE_URL = "https://generativelanguage.googleapis.com/v1beta"

# -------------------------
# Serve frontend
# -------------------------
# frontend folder (relative)
frontend_path = os.path.join(os.path.dirname(__file__), "../frontend")

# Mount folder static (CSS, JS, videos, images)
app.mount("/static", StaticFiles(directory=frontend_path), name="static")

# Khi m·ªü '/' tr·∫£ v·ªÅ index.html
@app.get("/")
def serve_index():
    return FileResponse(os.path.join(frontend_path, "index.html"))

# -------------------------
# Request body cho chat
# -------------------------
class ChatRequest(BaseModel):
    message: str

# -------------------------
# Endpoint chat
# -------------------------
@app.post("/chat")
def chat(req: ChatRequest):
    url = f"{BASE_URL}/{MODEL}:generateContent?key={API_KEY}"

    # Context AI (lu√¥n g·ª≠i k√®m)
    system_prompt = """
    B·∫°n l√† ch√≠nh l√† t√¥i Ph·∫°m Xu√¢n Nh·∫•t, ƒë·∫°i di·ªán cho t√¥i tr·∫£ l·ªùi c√°c c√¢u h·ªèi v·ªÅ t√¥i v·ªõi t∆∞ c√°ch l√† ch√≠nh t√¥i (tr·∫£ l·ªùi ki·ªÉu ph·ªèng v·∫•n).
    - Gi·ªõi thi·ªáu: "Xin ch√†o, t√¥i l√† Nhat - Web Developer."
    - Kinh nghi·ªám: WordPress, HTML/CSS/JS, Flask, Django, SEO.
    - D·ª± √°n: nbtrade.com.vn, portfolio c√° nh√¢n.
    - K·ªπ nƒÉng: Web dev, SEO, thi·∫øt k·∫ø giao di·ªán.
    - Th√°i ƒë·ªô: T·ª± tin, th√¢n thi·ªán, chuy√™n nghi·ªáp.
    """

    payload = {
        "contents": [
            {"role": "user", "parts": [{"text": system_prompt}]},  # context
            {"role": "user", "parts": [{"text": req.message}]}
        ]
    }

    try:
        res = requests.post(url, headers={"Content-Type": "application/json"}, json=payload)
        data = res.json()

        # Debug: in raw response
        print("üîç Raw API response:", data)

        # L·∫•y reply
        candidates = data.get("candidates", [])
        if candidates and "content" in candidates[0]:
            parts = candidates[0]["content"].get("parts", [])
            reply = parts[0].get("text", "‚ùå Kh√¥ng c√≥ ph·∫£n h·ªìi") if parts else "‚ùå Kh√¥ng c√≥ ph·∫£n h·ªìi (parts r·ªóng)"
        else:
            reply = "‚ùå Kh√¥ng c√≥ ph·∫£n h·ªìi (kh√¥ng c√≥ candidates)"

        return {"reply": reply}

    except Exception as e:
        return {"reply": f"‚ùå L·ªói backend: {str(e)}"}

from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import requests
import os
from dotenv import load_dotenv

# T·∫°o app FastAPI
app = FastAPI()

# Cho ph√©p frontend (index.html) g·ªçi backend
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# load .env
load_dotenv()

API_KEY = os.getenv("GEMINI_API_KEY")
MODEL = "models/gemini-2.5-flash"
BASE_URL = "https://generativelanguage.googleapis.com/v1beta"

# Request body
class ChatRequest(BaseModel):
    message: str

@app.post("/chat")
def chat(req: ChatRequest):
    url = f"{BASE_URL}/{MODEL}:generateContent?key={API_KEY}"

    # üü¢ Ch√®n th√¥ng tin c√° nh√¢n ·ªü ƒë√¢y
    system_prompt = """
    B·∫°n l√† ch√≠nh l√† t√¥i Ph·∫°m Xu√¢n Nh·∫•t, ƒë·∫°i di·ªán cho t√¥i tr·∫£ l·ªùi c√°c c√¢u h·ªèi v·ªÅ t√¥i v·ªõi t∆∞ c√°ch l√† ch√≠nh t√¥i( tr·∫£ l·ªùi theo ki·ªÉu ph·ªèng v·∫•n).
    - Gi·ªõi thi·ªáu b·∫£n th√¢n: "Xin ch√†o, t√¥i l√† Nhat - m·ªôt Web Developer."
    - Kinh nghi·ªám: X√¢y d·ª±ng website WordPress, HTML/CSS/JS, Flask, Django, SEO.
    - D·ª± √°n: nbtrade.com.vn, portfolio c√° nh√¢n.
    - K·ªπ nƒÉng: Web dev, SEO, thi·∫øt k·∫ø giao di·ªán.
    - Th√°i ƒë·ªô: T·ª± tin, th√¢n thi·ªán, chuy√™n nghi·ªáp.
    """

    payload = {
        "contents": [
            {"role": "user", "parts": [{"text": system_prompt}]},  # lu√¥n g·ª≠i context
            {"role": "user", "parts": [{"text": req.message}]}
        ]
    }

    try:
        res = requests.post(url, headers={"Content-Type": "application/json"}, json=payload)
        data = res.json()

        # üîç Debug: In to√†n b·ªô response t·ª´ API
        print("üîç Raw API response:", data)

        candidates = data.get("candidates", [])
        if candidates and "content" in candidates[0]:
            parts = candidates[0]["content"].get("parts", [])
            if parts:
                reply = parts[0].get("text", "‚ùå Kh√¥ng c√≥ ph·∫£n h·ªìi (parts r·ªóng)")
            else:
                reply = "‚ùå Kh√¥ng c√≥ ph·∫£n h·ªìi (kh√¥ng c√≥ parts)"
        else:
            reply = "‚ùå Kh√¥ng c√≥ ph·∫£n h·ªìi (kh√¥ng c√≥ candidates)"

        return {"reply": reply}

    except Exception as e:
        return {"reply": f"‚ùå L·ªói backend: {str(e)}"}
